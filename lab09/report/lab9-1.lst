     1                                  ;-----------------------------------------------------------------
     2                                  ; Программа вывода значений регистра 'ecx'
     3                                  ;-----------------------------------------------------------------
     4                                  
     5                                  %include 'in_out.asm'
     6                              <1> ;---------------   slen  -------------------
     7                              <1> ; Функция вычисления длины сообщения
     8                              <1> slen:                     
     9 00000000 53                  <1>     push    ebx             
    10 00000001 89C3                <1>     mov     ebx, eax        
    11                              <1>     
    12                              <1> nextchar:                   
    13 00000003 803800              <1>     cmp     byte [eax], 0   
    14 00000006 7403                <1>     jz      finished        
    15 00000008 40                  <1>     inc     eax             
    16 00000009 EBF8                <1>     jmp     nextchar        
    17                              <1>     
    18                              <1> finished:
    19 0000000B 29D8                <1>     sub     eax, ebx
    20 0000000D 5B                  <1>     pop     ebx             
    21 0000000E C3                  <1>     ret                     
    22                              <1> 
    23                              <1> 
    24                              <1> ;---------------  sprint  -------------------
    25                              <1> ; Функция печати сообщения
    26                              <1> ; входные данные: mov eax,<message>
    27                              <1> sprint:
    28 0000000F 52                  <1>     push    edx
    29 00000010 51                  <1>     push    ecx
    30 00000011 53                  <1>     push    ebx
    31 00000012 50                  <1>     push    eax
    32 00000013 E8E8FFFFFF          <1>     call    slen
    33                              <1>     
    34 00000018 89C2                <1>     mov     edx, eax
    35 0000001A 58                  <1>     pop     eax
    36                              <1>     
    37 0000001B 89C1                <1>     mov     ecx, eax
    38 0000001D BB01000000          <1>     mov     ebx, 1
    39 00000022 B804000000          <1>     mov     eax, 4
    40 00000027 CD80                <1>     int     80h
    41                              <1> 
    42 00000029 5B                  <1>     pop     ebx
    43 0000002A 59                  <1>     pop     ecx
    44 0000002B 5A                  <1>     pop     edx
    45 0000002C C3                  <1>     ret
    46                              <1> 
    47                              <1> 
    48                              <1> ;----------------  sprintLF  ----------------
    49                              <1> ; Функция печати сообщения с переводом строки
    50                              <1> ; входные данные: mov eax,<message>
    51                              <1> sprintLF:
    52 0000002D E8DDFFFFFF          <1>     call    sprint
    53                              <1> 
    54 00000032 50                  <1>     push    eax
    55 00000033 B80A000000          <1>     mov     eax, 0AH
    56 00000038 50                  <1>     push    eax
    57 00000039 89E0                <1>     mov     eax, esp
    58 0000003B E8CFFFFFFF          <1>     call    sprint
    59 00000040 58                  <1>     pop     eax
    60 00000041 58                  <1>     pop     eax
    61 00000042 C3                  <1>     ret
    62                              <1> 
    63                              <1> ;---------------  sread  ----------------------
    64                              <1> ; Функция считывания сообщения
    65                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    66                              <1> sread:
    67 00000043 53                  <1>     push    ebx
    68 00000044 50                  <1>     push    eax
    69                              <1>    
    70 00000045 BB00000000          <1>     mov     ebx, 0
    71 0000004A B803000000          <1>     mov     eax, 3
    72 0000004F CD80                <1>     int     80h
    73                              <1> 
    74 00000051 5B                  <1>     pop     ebx
    75 00000052 59                  <1>     pop     ecx
    76 00000053 C3                  <1>     ret
    77                              <1>     
    78                              <1> ;------------- iprint  ---------------------
    79                              <1> ; Функция вывода на экран чисел в формате ASCII
    80                              <1> ; входные данные: mov eax,<int>
    81                              <1> iprint:
    82 00000054 50                  <1>     push    eax             
    83 00000055 51                  <1>     push    ecx             
    84 00000056 52                  <1>     push    edx             
    85 00000057 56                  <1>     push    esi             
    86 00000058 B900000000          <1>     mov     ecx, 0          
    87                              <1>     
    88                              <1> divideLoop:
    89 0000005D 41                  <1>     inc     ecx             
    90 0000005E BA00000000          <1>     mov     edx, 0          
    91 00000063 BE0A000000          <1>     mov     esi, 10  
    92 00000068 F7FE                <1>     idiv    esi    
    93 0000006A 83C230              <1>     add     edx, 48  
    94 0000006D 52                  <1>     push    edx   
    95 0000006E 83F800              <1>     cmp     eax, 0   
    96 00000071 75EA                <1>     jnz     divideLoop  
    97                              <1> 
    98                              <1> printLoop:
    99 00000073 49                  <1>     dec     ecx       
   100 00000074 89E0                <1>     mov     eax, esp  
   101 00000076 E894FFFFFF          <1>     call    sprint   
   102 0000007B 58                  <1>     pop     eax    
   103 0000007C 83F900              <1>     cmp     ecx, 0   
   104 0000007F 75F2                <1>     jnz     printLoop  
   105                              <1> 
   106 00000081 5E                  <1>     pop     esi   
   107 00000082 5A                  <1>     pop     edx    
   108 00000083 59                  <1>     pop     ecx   
   109 00000084 58                  <1>     pop     eax           
   110 00000085 C3                  <1>     ret
   111                              <1> 
   112                              <1> 
   113                              <1> ;--------------- iprintLF   --------------------
   114                              <1> ; Функция вывода на экран чисел в формате ASCII
   115                              <1> ; входные данные: mov eax,<int>
   116                              <1> iprintLF:
   117 00000086 E8C9FFFFFF          <1>     call    iprint          
   118                              <1> 
   119 0000008B 50                  <1>     push    eax             
   120 0000008C B80A000000          <1>     mov     eax, 0Ah        
   121 00000091 50                  <1>     push    eax             
   122 00000092 89E0                <1>     mov     eax, esp       
   123 00000094 E876FFFFFF          <1>     call    sprint          
   124 00000099 58                  <1>     pop     eax             
   125 0000009A 58                  <1>     pop     eax             
   126 0000009B C3                  <1>     ret
   127                              <1> 
   128                              <1> ;----------------- atoi  ---------------------
   129                              <1> ; Функция преобразования ascii-код символа в целое число
   130                              <1> ; входные данные: mov eax,<int>
   131                              <1> atoi:
   132 0000009C 53                  <1>     push    ebx             
   133 0000009D 51                  <1>     push    ecx             
   134 0000009E 52                  <1>     push    edx             
   135 0000009F 56                  <1>     push    esi             
   136 000000A0 89C6                <1>     mov     esi, eax        
   137 000000A2 B800000000          <1>     mov     eax, 0          
   138 000000A7 B900000000          <1>     mov     ecx, 0          
   139                              <1>  
   140                              <1> .multiplyLoop:
   141 000000AC 31DB                <1>     xor     ebx, ebx        
   142 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   143 000000B1 80FB30              <1>     cmp     bl, 48 
   144 000000B4 7C14                <1>     jl      .finished 
   145 000000B6 80FB39              <1>     cmp     bl, 57  
   146 000000B9 7F0F                <1>     jg      .finished 
   147                              <1>  
   148 000000BB 80EB30              <1>     sub     bl, 48 
   149 000000BE 01D8                <1>     add     eax, ebx
   150 000000C0 BB0A000000          <1>     mov     ebx, 10  
   151 000000C5 F7E3                <1>     mul     ebx  
   152 000000C7 41                  <1>     inc     ecx   
   153 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   154                              <1>  
   155                              <1> .finished:
   156 000000CA 83F900              <1>     cmp     ecx, 0  
   157 000000CD 7407                <1>     je      .restore   
   158 000000CF BB0A000000          <1>     mov     ebx, 10  
   159 000000D4 F7F3                <1>     div     ebx     
   160                              <1>  
   161                              <1> .restore:
   162 000000D6 5E                  <1>     pop     esi   
   163 000000D7 5A                  <1>     pop     edx    
   164 000000D8 59                  <1>     pop     ecx  
   165 000000D9 5B                  <1>     pop     ebx 
   166 000000DA C3                  <1>     ret
   167                              <1> 
   168                              <1> 
   169                              <1> ;------------- quit   ---------------------
   170                              <1> ; Функция завершения программы
   171                              <1> quit:
   172 000000DB BB00000000          <1>     mov     ebx, 0      
   173 000000E0 B801000000          <1>     mov     eax, 1      
   174 000000E5 CD80                <1>     int     80h
   175 000000E7 C3                  <1>     ret
     6                                  SECTION .data
     7 00000000 D092D0B2D0B5D0B4D0-        msg1 db 'Введите N: ',0h
     7 00000009 B8D182D0B5204E3A20-
     7 00000012 00                 
     8                                  
     9                                  SECTION .bss
    10 00000000 <res Ah>                   N: resb 10
    11                                  
    12                                  SECTION .text
    13                                     global _start
    14                                  _start:
    15                                  
    16                                  ; ----- Вывод сообщения 'Введите N: '
    17 000000E8 B8[00000000]                mov eax,msg1
    18 000000ED E81DFFFFFF                  call sprint
    19                                  
    20                                  ; ----- Ввод 'N'
    21 000000F2 B9[00000000]                mov ecx, N
    22 000000F7 BA0A000000                  mov edx, 10
    23 000000FC E842FFFFFF                  call sread
    24                                  
    25                                  ; ----- Преобразование 'N' из символа в число
    26 00000101 B8[00000000]                mov eax,N
    27 00000106 E891FFFFFF                  call atoi
    28 0000010B A3[00000000]                mov [N],eax
    29                                  
    30                                  ; ------ Организация цикла
    31 00000110 8B0D[00000000]              mov ecx,[N] ; Счетчик цикла, `ecx=N`
    32                                  label:
    33 00000116 890D[00000000]              mov [N],ecx
    34 0000011C A1[00000000]                mov eax,[N]
    35 00000121 E860FFFFFF                  call iprintLF    ; Вывод значения `N`
    36 00000126 E2EE                        loop label       ; `ecx=ecx-1` и если `ecx` не '0'
    37                                                                           ; переход на `label`
    38 00000128 E8AEFFFFFF                  call    quit
